using Path = System.IO.Path;
using File = System.IO.File;

using CSharpSyntaxTree = Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree;

using System.Collections.Generic;

using NUnit.Framework;

namespace DoctestCsharp.Test
{
    public class InputPath
    {
        [Test]
        public void Test()
        {
            using var tmpdir = new TemporaryDirectory();

            string got = Process.InputPath("SomeProgram.cs", tmpdir.Path);

            Assert.AreEqual(Path.Join(tmpdir.Path, "SomeProgram.cs"), got);
        }
    }

    public class OutputPath
    {
        [Test]
        public void TestThatItWorks()
        {
            var cases = new List<(string, string)>
            {
                ("SomeProgram.cs", "DocTestSomeProgram.cs"),
                (Path.Join("SomeSubdir", "SomeProgram.cs"), Path.Join("SomeSubdir", "DocTestSomeProgram.cs"))
            };

            foreach ((string relativePath, string expectedRelativePath) in cases)
            {
                using var tmpdir = new TemporaryDirectory();

                string absoluteOutputPath = Process.OutputPath(
                    relativePath, tmpdir.Path);

                string relativeOutputPath = Path.GetRelativePath(tmpdir.Path, absoluteOutputPath);

                Assert.AreEqual(expectedRelativePath, relativeOutputPath);
            }
        }
    }

    public class IdentifierTests
    {
        [Test]
        public void TestSimpleFilename()
        {
            Assert.AreEqual(
                "DocTest_SomeProgram_cs",
                Process.Identifier("SomeProgram.cs"));
        }

        [Test]
        public void TestFilenameWithBrackets()
        {
            Assert.AreEqual(
                "DocTest_SomeProgram_T__cs",
                Process.Identifier("SomeProgram{T}.cs"));
        }

        [Test]
        public void TestSubdir()
        {
            Assert.AreEqual(
                "DocTest_Subdir_SomeProgram_cs",
                Process.Identifier(Path.Join("Subdir", "SomeProgram.cs")));
        }
    }

    public class GenerateTests
    {
        [Test]
        public void TestNoDoctest()
        {
            using var tmpdir = new TemporaryDirectory();
            string outputPath = Path.Join(tmpdir.Path, "DocTestSomeProgram.cs");

            var doctestsAndErrors = Extraction.Extract(
                CSharpSyntaxTree.ParseText(
                    "No doctest at all"));

            Assert.AreEqual(0, doctestsAndErrors.Errors.Count);
            var doctests = doctestsAndErrors.Doctests;

            bool got = Process.Generate(doctests, "SomeProgram.cs", outputPath);

            Assert.IsFalse(got);
            Assert.IsFalse(File.Exists(outputPath));
        }

        [Test]
        public void TestDoctest()
        {
            using var tmpdir = new TemporaryDirectory();
            string outputPath = Path.Join(tmpdir.Path, "DocTestSomeProgram.cs");

            var doctestsAndErrors = Extraction.Extract(
                CSharpSyntaxTree.ParseText(
                    @"/// <code doctest=""true"">
/// var x = 1;
/// </code>"));

            Assert.AreEqual(0, doctestsAndErrors.Errors.Count);
            var doctests = doctestsAndErrors.Doctests;

            bool got = Process.Generate(doctests, "SomeProgram.cs", outputPath);

            Assert.IsTrue(got);
            Assert.IsTrue(File.Exists(outputPath));
            Assert.AreEqual(@"// This file was automatically generated by doctest-csharp.
// !!! DO NOT EDIT OR APPEND !!!

using NUnit.Framework;

namespace Tests
{
    public class DocTest_SomeProgram_cs
    {
        [Test]
        public void AtLine0AndColumn4()
        {
            var x = 1;
        }
    }
}

// This file was automatically generated by doctest-csharp.
// !!! DO NOT EDIT OR APPEND !!!
",
                File.ReadAllText(outputPath));
        }
    }

    public class CheckTests
    {
        [Test]
        public void TestOkNoDoctest()
        {
            using var tmpdir = new TemporaryDirectory();
            string outputPath = Path.Join(tmpdir.Path, "DocTestSomeProgram.cs");

            var doctestsAndErrors = Extraction.Extract(
                CSharpSyntaxTree.ParseText(
                    "No doctest at all"));

            Assert.AreEqual(0, doctestsAndErrors.Errors.Count);
            var doctests = doctestsAndErrors.Doctests;

            Process.Report got = Process.Check(doctests, "SomeProgram.cs", outputPath);

            Assert.AreEqual(Process.Report.Ok, got);
        }

        [Test]
        public void TestOkDoctest()
        {
            using var tmpdir = new TemporaryDirectory();
            string outputPath = Path.Join(tmpdir.Path, "DocTestSomeProgram.cs");

            string programText = @"
/// <code doctest=""true"">
///    var x = 1;
/// </code>
";

            var doctestsAndErrors = Extraction.Extract(
                CSharpSyntaxTree.ParseText(
                    programText));

            Assert.AreEqual(0, doctestsAndErrors.Errors.Count);
            var doctests = doctestsAndErrors.Doctests;

            File.WriteAllText(outputPath, @"// This file was automatically generated by doctest-csharp.
// !!! DO NOT EDIT OR APPEND !!!

using NUnit.Framework;

namespace Tests
{
    public class DocTest_SomeProgram_cs
    {
        [Test]
        public void AtLine1AndColumn4()
        {
            var x = 1;
        }
    }
}

// This file was automatically generated by doctest-csharp.
// !!! DO NOT EDIT OR APPEND !!!
");
            Process.Report got = Process.Check(doctests, "SomeProgram.cs", outputPath);

            Assert.AreEqual(Process.Report.Ok, got);
        }

        [Test]
        public void TestDoesntExist()
        {
            using var tmpdir = new TemporaryDirectory();
            string outputPath = Path.Join(tmpdir.Path, "DocTestSomeProgram.cs");

            string programText = @"
/// <code doctest=""true"">
///    var x = 1;
/// </code>
";

            var doctestsAndErrors = Extraction.Extract(
                CSharpSyntaxTree.ParseText(
                    programText));

            Assert.AreEqual(0, doctestsAndErrors.Errors.Count);
            var doctests = doctestsAndErrors.Doctests;

            // Test pre-condition
            Assert.IsFalse(File.Exists(outputPath));

            Process.Report got = Process.Check(doctests, "SomeProgram.cs", outputPath);

            Assert.AreEqual(Process.Report.DoesntExist, got);
        }

        [Test]
        public void TestShouldntExist()
        {
            using var tmpdir = new TemporaryDirectory();
            string outputPath = Path.Join(tmpdir.Path, "DocTestSomeProgram.cs");

            var doctestsAndErrors = Extraction.Extract(
                CSharpSyntaxTree.ParseText(
                    "no doctest"));

            Assert.AreEqual(0, doctestsAndErrors.Errors.Count);
            var doctests = doctestsAndErrors.Doctests;

            File.WriteAllText(outputPath, "should not exist");

            Process.Report got = Process.Check(doctests, "SomeProgram.cs", outputPath);

            Assert.AreEqual(Process.Report.ShouldNotExist, got);
        }

        [Test]
        public void TestDifferent()
        {
            using var tmpdir = new TemporaryDirectory();
            string outputPath = Path.Join(tmpdir.Path, "DocTestSomeProgram.cs");

            string programText = @"
/// <code doctest=""true"">
///    var x = 1;
/// </code>
";
            var doctestsAndErrors = Extraction.Extract(
                CSharpSyntaxTree.ParseText(
                    programText));

            Assert.AreEqual(0, doctestsAndErrors.Errors.Count);
            var doctests = doctestsAndErrors.Doctests;

            File.WriteAllText(outputPath, "different content");

            Process.Report got = Process.Check(doctests, "SomeProgram.cs", outputPath);

            Assert.AreEqual(Process.Report.Different, got);
        }
    }
}
